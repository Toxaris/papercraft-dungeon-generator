workspace(
    name = "papercraft_dungeon_generator",
)

# fetch direct ruleset dependencies
# (and selected indirect dependencies)

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "aspect_bazel_lib",
    sha256 = "79623d656aa23ad3fd4692ab99786c613cd36e49f5566469ed97bc9b4c655f03",
    strip_prefix = "bazel-lib-1.23.3",
    url = "https://github.com/aspect-build/bazel-lib/archive/refs/tags/v1.23.3.tar.gz",
)

http_archive(
    name = "aspect_rules_format",
    sha256 = "cc9337eb846bd08df2f977c299ab9f6d9f9e9ba171061fd31847fc9bdc1f17ec",
    strip_prefix = "bazel-super-formatter-1.0.0",
    url = "https://github.com/aspect-build/bazel-super-formatter/archive/refs/tags/v1.0.0.tar.gz",
)

http_archive(
    name = "aspect_rules_js",
    sha256 = "9f51475dd2f99abb015939b1cf57ab5f15ef36ca6d2a67104450893fd0aa5c8b",
    strip_prefix = "rules_js-1.16.0",
    url = "https://github.com/aspect-build/rules_js/archive/refs/tags/v1.16.0.tar.gz",
)

http_archive(
    name = "aspect_rules_ts",
    sha256 = "acb20a4e41295d07441fa940c8da9fd02f8637391fd74a14300586a3ee244d59",
    strip_prefix = "rules_ts-1.2.0",
    url = "https://github.com/aspect-build/rules_ts/archive/refs/tags/v1.2.0.tar.gz",
)

http_archive(
    name = "aspect_rules_jest",
    sha256 = "0ea90fc5ed2b657f22c447494b2bfc563008b47900974b1e092e092cb1999a01",
    strip_prefix = "rules_jest-0.14.4",
    url = "https://github.com/aspect-build/rules_jest/archive/refs/tags/v0.14.4.tar.gz",
)

http_archive(
    name = "rules_nodejs",
    sha256 = "08337d4fffc78f7fe648a93be12ea2fc4e8eb9795a4e6aa48595b66b34555626",
    urls = ["https://github.com/bazelbuild/rules_nodejs/releases/download/5.8.0/rules_nodejs-core-5.8.0.tar.gz"],
)

# fetch indirect ruleset dependencies

load("@aspect_bazel_lib//lib:repositories.bzl", "aspect_bazel_lib_dependencies")

aspect_bazel_lib_dependencies()

load("@aspect_rules_format//format:repositories.bzl", "rules_format_dependencies")

rules_format_dependencies()

load("@aspect_rules_js//js:repositories.bzl", "rules_js_dependencies")

rules_js_dependencies()

load("@aspect_rules_ts//ts:repositories.bzl", "rules_ts_dependencies")

rules_ts_dependencies(
    ts_version_from = "//:package.json",
)

# setup pnpm

load("@aspect_rules_js//npm:npm_import.bzl", "pnpm_repository")

pnpm_repository(
    name = "pnpm",
)

# setup nodejs

load("@rules_nodejs//nodejs:repositories.bzl", "DEFAULT_NODE_VERSION", "nodejs_register_toolchains")

nodejs_register_toolchains(
    name = "nodejs",
    node_version = DEFAULT_NODE_VERSION,
)

# setup jest?

load("@aspect_rules_jest//jest:dependencies.bzl", "rules_jest_dependencies")

rules_jest_dependencies()

load("@aspect_rules_jest//jest:repositories.bzl", "jest_repositories")

jest_repositories(name = "jest")

load("@jest//:npm_repositories.bzl", jest_npm_repositories = "npm_repositories")

jest_npm_repositories()

# setup npm dependencies

load("@aspect_rules_js//npm:npm_import.bzl", "npm_translate_lock")

npm_translate_lock(
    name = "npm",
    bins = {
        # derived from "bin" attribute in node_modules/react-scripts/package.json
        "react-scripts": {
            "react-scripts": "./bin/react-scripts.js",
        },
    },
    pnpm_lock = "//:pnpm-lock.yaml",
    public_hoist_packages = {
        "eslint-config-react-app": ["frontend"],
        "eslint": ["frontend"],
    },
    verify_node_modules_ignored = "//:.bazelignore",
)

load("@npm//:repositories.bzl", "npm_repositories")

npm_repositories()

# setup npm dependencies of rules_format

load("@aspect_rules_format//format:dependencies.bzl", "parse_dependencies")

parse_dependencies()

# setup missing toolchains for rules_format
# (keep this at the end of the WORKSPACE.bazel to avoid overriding our own toolchain configuration)

load("@aspect_rules_format//format:toolchains.bzl", "format_register_toolchains")

format_register_toolchains()
